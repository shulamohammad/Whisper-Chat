<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chat Room</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/styles.css">
</head>
<body>
  <div class=" container-fluid vh-100 p-0">
    <div class="card text-center w-100 h-100 card-container" style="border: none;">
      <div class=" purple card-header  text-white">
        <h5>Whisper Chat App</h5>
      </div>
      <div class="card-body d-flex flex-column h-100">
        <div id="chat-box" class="chat-box border rounded p-3 mb-3 flex-grow-1">
          <p>Connecting to a stranger...</p>
          <div class="image-loader-container">
            <img class="man" src="/man.png" alt="Man">
            <div class="loader"></div>
            <img class="woman" src="/woman.png" alt="Woman">
          </div>
        </div>
        <div class="input-group mb-3">
          <input type="text" id="message-input" class="form-control" placeholder="Type a message">
          <button id="send-button" class="btnsend ">Send</button>
        </div>
        <button id="end-chat-button" class=" endChat btn btn-outline-secondary mt-2">End Chat</button>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/socket.io/client-dist/socket.io.js"></script>
  <script>
    const socket = io();

    // Variables to store match info
    let partnerId;

    // Listen for match
    socket.on('match', (id) => {
      partnerId = id;
      document.getElementById('chat-box').innerHTML = "<p>Connected! Start chatting.</p>";
    });

    // Handle receiving messages
    socket.on('message', (data) => {
      const chatBox = document.getElementById('chat-box');
      chatBox.innerHTML += `<p><b>Stranger:</b> ${data.message}</p>`;
      chatBox.scrollTop = chatBox.scrollHeight;
    });

    // Send message on button click
    document.getElementById('send-button').addEventListener('click', () => {
      const messageInput = document.getElementById('message-input');
      const message = messageInput.value;
      if (partnerId && message.trim() !== "") {
        socket.emit('message', { recipientId: partnerId, message });
        document.getElementById('chat-box').innerHTML += `<p><b>You:</b> ${message}</p>`;
        messageInput.value = '';
        const chatBox = document.getElementById('chat-box');
        chatBox.scrollTop = chatBox.scrollHeight;
      }
    });

    // Handle "Enter" key for sending messages
    document.getElementById('message-input').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        document.getElementById('send-button').click();
      }
    });

    // Handle end chat button
    document.getElementById('end-chat-button').addEventListener('click', () => {
      socket.disconnect();
      window.location.href = "/";
    });
  </script>
</body>
</html>
